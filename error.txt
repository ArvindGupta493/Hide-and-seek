const Promise = require("bluebird");
const crypto = require('crypto');
const bcrypt = require("bcrypt");
const mongoose = require("mongoose");

const { SuccessHandler } = require("../../Middlewares/responseHandler");
const { sendOtpEmail } = require('../../Services/otpService');
const userService = require("../../Services/userService");
const UserModel = require('../../Models/UserModel'); 
const ErrorHandler = require("../../Utils/errorHandler");
const sendEmail = require('../../Utils/sendEmail'); 

const GameSettings = require("../../Models/GameSettings");
const  NotificationModel  = require("../../Models/NotificationModel");
const { sendNotification } = require("../../Services/notificationService");
const { log } = require("console");
const BlacklistedToken = require("../../Models/BlacklistedToken.js");


class UserController {
    
    async registerController(req, res, next) {
        try {
            const user = await userService.registerService(req.body);
            return SuccessHandler(res, user.msg, 201, user.data);
        } catch (error) {
            return next(new ErrorHandler("Registration failed.", 500, error));
        }
    }

    async loginController(req, res, next) {
        try {
            const { email, password } = req.body;
            const user = await userService.loginService({ email, password });

            if (!user.success) {
                return res.status(user.status).json({ success: user.success, message: user.msg });
            }

            const { token } = user.data;
            if (!token) {
                throw new Error("Token is missing in response from loginService");
            }
            return SuccessHandler(res, user.msg, user.status, user.data);
        } catch (error) {
            return next(new ErrorHandler("Login failed.", 500, error));
        }
    }

    async logoutController(req, res, next) {
        try {
            const token = req.headers.authorization?.split(" ")[1]; 
            if (!token) {
                return res.status(401).json({ success: false, message: "No token provided." });
            }
            await BlacklistedToken.create({ token });
            res.status(200).json({ success: true, message: "Logout successful." });
        } catch (error) {
            return next(new ErrorHandler("Logout failed.", 500, error));
        }
    }

    
    async getUserProfileController(req, res, next) {
        try {
            const user = await userService.getUserProfileService(req.decoded.id);
            if (user && user.success) {
                return SuccessHandler(res, user.msg, user.status, user.data);
            } else {
                return next(new ErrorHandler(user.msg, user.status, user.data));
            }
        } catch (error) {
            return next(new ErrorHandler("Error fetching profile.", 500, error));
        }
    }


        async generateOtpController(req, res) {
            try {
                const { email } = req.body;
                const user = await UserModel.findOne({ email });
        
                if (!user) {
                    return res.status(404).json({ success: false, message: 'User not found.' });
                }
        
                const otp = crypto.randomInt(1000, 9999).toString();
                const hashedOtp = crypto.createHash('sha256').update(otp).digest('hex');
                const otpExpires = new Date(Date.now() + 10000 * 60 * 1000); // 10000 minutes expiry
        
                // Update the existing user with OTP and expiry
                user.otp = hashedOtp;
                user.otpExpires = otpExpires;
                await user.save();
        
                await sendEmail(user.email, 'Your OTP Code', `Your OTP is: ${otp}`);
                console.log(`OTP sent to ${email}: ${otp}`); // For debugging only. Remove in production.
        
                res.status(200).json({ success: true, message: 'OTP sent successfully.' });
            } catch (error) {
                console.error('Error generating OTP:', error);
                res.status(500).json({ success: false, message: 'Error generating OTP.' });
            }
        }

        
        async verifyOtpController(req, res, next) {
            try {
                const { email, otp } = req.body;
                console.log("Verifying OTP for email:", email); // Debugging line
        
                const user = await UserModel.findOne({ email: email.toLowerCase() }).select("+otp +otpExpires");
                console.log("User found:", user); // Debugging line
                if (!user) {
                    return res.status(404).json({ success: false, message: 'User not found.' });
                }
        
                const hashedOtp = crypto.createHash('sha256').update(otp).digest('hex');
                if (user.otp !== hashedOtp || user.otpExpires < new Date()) {
                    return res.status(400).json({ success: false, message: 'Invalid or expired OTP.' });
                }

                await user.save();
                res.status(200).json({ success: true, message: 'OTP verified successfully.' });
            } catch (error) {
                console.error("Error verifying OTP:", error);  // Debugging line
                return next(new ErrorHandler("Error verifying OTP.", 500, error));
            }
        }

        async updatePasswordController(req, res) {
            try {
                const { email, otp, newPassword, confirmPassword } = req.body;
        
                // Validate input fields
                if (!email || !otp || !newPassword || !confirmPassword) {
                    return res.status(400).json({ message: "All fields are required." });
                }
                if (newPassword !== confirmPassword) {
                    return res.status(400).json({ message: "Passwords do not match." });
                }
                // Check if the user exists
                const user = await UserModel.findOne({ email }).select("+otp +otpExpires");
                if (!user) {
                    return res.status(404).json({ message: "User not found." });
                }
                // Validate OTP
                const hashedOtp = crypto.createHash('sha256').update(otp).digest('hex');
                console.log("Hashed OTP (Input):", hashedOtp);
                console.log("Stored OTP in DB:", user.otp);
                console.log("OTP Expiry:", user.otpExpires);
                console.log("Current Time:", new Date());
                
                if (user.otp !== hashedOtp || user.otpExpires < new Date()) {
                    return res.status(400).json({ success: false, message: 'Invalid or expired OTP.' });
                }
                // Hash new password
                const salt = await bcrypt.genSalt(10);
                const hashedPassword = await bcrypt.hash(newPassword, salt);

                // Update password and clear OTP
                user.password = hashedPassword;
                user.otp = undefined;
                user.otpExpires = undefined;
                await user.save();
    
                return res.status(200).json({ message: "Password updated successfully." });
            } catch (error) {
                console.error("Error updating password:", error);
                return res.status(500).json({ message: "Internal server error." });
            }
        }


// =================================================== GAME ======================================================= //
       
async getUserListController(req, res) {
    try {
        const userId = req.decoded.id;
        const { range } = req.query;  
        const parsedRange = parseInt(range, 10) || 5;

        console.log("Request received at /get-users-in-range with user ID:", userId);
        console.log("Parsed range:", parsedRange);

        const currentUser = await UserModel.findById(userId);
        if (!currentUser || !currentUser.location || !currentUser.location.coordinates) {
            return res.status(400).json({ 
                success: false, 
                message: "User location not found or invalid.", 
                players: [] 
            });
        }

        const nearbyUsers = await UserModel.find({
            _id: { $ne: userId },
            location: {
                $near: {
                    $geometry: { type: "Point", coordinates: currentUser.location.coordinates },
                    $maxDistance: parsedRange * 1000, 
                },
            },
        }).select("_id username location"); // Only return necessary fields

        if (!nearbyUsers.length) {
            return res.status(200).json({ 
                success: true, 
                message: "No players found in range.", 
                players: [] 
            });
        }

        res.setHeader("Content-Type", "application/json");
        return res.status(200).json({ success: true, players: nearbyUsers });

    } catch (error) {
        console.error("Server error:", error);

        res.setHeader("Content-Type", "application/json");
        return res.status(500).json({ 
            success: false, 
            message: "Internal server error.", 
            error: error.message, 
            players: [] 
        });
    }
}

// Select a player and save in the database
async selectPlayerController(req, res) {
    try {
        const { opponentId, opponentUsername, duration, interval } = req.body;
        const userId = req.decoded.id;

        if (!opponentId && !opponentUsername) {
            return res.status(400).json({ success: false, message: "Opponent ID or Username is required." });
        }

        const user = await UserModel.findById(userId);
        if (!user) {
            return res.status(404).json({ success: false, message: "User not found." });
        }

        // Find opponent by ID or username
        let opponent;
        if (opponentId) {
            opponent = await UserModel.findById(opponentId);
        } else if (opponentUsername) {
            opponent = await UserModel.findOne({ username: opponentUsername });
        }

        if (!opponent) {
            return res.status(404).json({ success: false, message: "Opponent not found." });
        }

        user.opponentId = opponent._id;
        opponent.opponentId = userId;

        // Save game settings
        user.gameSettings = { duration, interval };
        opponent.gameSettings = { duration, interval };

        await user.save();
        await opponent.save();

        res.status(200).json({ 
            success: true, 
            message: "Opponent selected and game settings saved successfully.", 
            selectedOpponent: { id: opponent._id, username: opponent.username },
            gameSettings: { duration, interval }
        });

    } catch (error) {
        console.error("Error selecting opponent:", error);
        res.status(500).json({ success: false, message: "Server error." });
    }
}



// Save game settings with userId and opponentId
async saveGameSettingsController(req, res) {
    try {
        const userId = req.decoded.id;
        const { duration, interval, radius
            // , opponentId 
        } = req.body;

        if (!duration || !interval || !radius 
            // || !opponentId
        ) {
            return res.status(400).json({ success: false, message: "All fields are required, including opponentId" });
        }
        if (interval < 1 || interval > 5) {
            return res.status(400).json({ success: false, message: "Interval must be between 1 and 5 minutes" });
        }
        const parsedRadius = parseInt(radius, 10);
        if (![1, 2, 3, 4, 5].includes(parsedRadius)) {
            return res.status(400).json({ success: false, message: "Radius must be between 1km and 5km" });
        }
        let gameSettings = await GameSettings.findOne({ userId });

        if (gameSettings) {
            // Update existing game settings
            gameSettings.duration = duration;
            gameSettings.interval = interval;
            gameSettings.radius = parsedRadius;
            // gameSettings.players = [userId, opponentId];
        } else {
            // Create new game settings
            gameSettings = new GameSettings({
                userId,
                duration,
                interval,
                radius: parsedRadius,
                // players: [userId, opponentId]
            });
        }
        await gameSettings.save();
        res.status(200).json({ success: true, settings: gameSettings });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
}


async savedGameSettingsController(req, res) {
    try {
        const userId = req.decoded.id;
        const gameSettings = await GameSettings.findOne({ userId });
        if (!gameSettings) {
            return res.status(404).json({ success: false, message: "Game settings not found." });
        }
        res.status(200).json({ success: true, settings: gameSettings });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
}



// choiceController: First player selects "hide" or "seek"

async choiceController(req, res) {
    try {
        const { choice } = req.body;
        const userId = req.decoded.id;

        // Find the user
        const user = await UserModel.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "User not found." });
        }
        user.role = choice;

        // Find the opponent
        const opponent = await UserModel.findOne({ _id: user.opponentId }); // Ensure opponentId exists
        if (!opponent) {
            return res.status(404).json({ message: "Opponent not found." });
        }

        opponent.role = choice === "seek" ? "hide" : "seek";   // Assign the opposite role to the opponent

        // Save both users
        await user.save();
        await opponent.save();

        res.status(200).json({ message: "Roles assigned successfully.", userRole: user.role, opponentRole: opponent.role });
    } catch (error) {
        console.error("Error assigning roles:", error);
        res.status(500).json({ message: "Internal server error." });
    }
};

// requestAcceptionController: Accept or decline a game request

async requestAcceptionController(req, res) {
    try {
        const { decision } = req.body; // 'accept' or 'decline'
        const userId = req.decoded.id;

        const user = await UserModel.findById(userId);
        if (!user || !user.opponentId) {
            return res.status(400).json({ message: 'No opponent request found.' });
        }

        const opponentId = user.opponentId;
        const opponent = await UserModel.findById(opponentId);
        if (!opponent) {
            return res.status(400).json({ message: 'Opponent not found.' });
        }
        if (decision === 'accept') {
            user.gameStatus = 'pending-start'; // Game is now waiting for roles
            opponent.gameStatus = 'pending-start';
    
            await user.save();
            await opponent.save();

            // Notify the original requester
            await sendNotification(opponentId, userId, "game-request", "Your game request has been accepted!");

            return res.status(200).json({ success: true, message: "Game request accepted!" });
        } else if (decision === 'decline') {
            // Reset opponent selection
            user.selectedOpponent = null;
            opponent.selectedOpponent = null;

            await user.save();
            await opponent.save();

            // Notify the original requester
            await sendNotification(opponentId, userId, "game-request", "Your game request has been declined.");

            return res.status(200).json({ success: true, message: "Game request declined." });
        } else {
            return res.status(400).json({ message: 'Invalid decision. Must be "accept" or "decline".' });
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error.' });
    }
}

// startGameNowController: Starts the game once both players have confirmed.

async startGameNowController(req, res) {
    try {
        const userId = req.decoded.id;

        //  Fetch the user and their opponent FIRST
        const user = await UserModel.findById(userId);
        if (!user || !user.opponentId) {
            return res.status(400).json({ message: "No opponent selected. Please select an opponent first." });
        }
        const opponent = await UserModel.findById(user.opponentId);
        if (!opponent) {
            return res.status(400).json({ message: "Selected opponent not found." });
        }

        let gameSettings = await GameSettings.findOne({ userId });
        if (!gameSettings) {
            if (!user.role || !opponent.role) {
                return res.status(400).json({ message: "Both players must select hide or seek before starting." });
            }
            if (user.role === opponent.role) {
                return res.status(400).json({ message: "Players must choose different roles (one hides, one seeks)." });
            }
            if (user.gameStatus === 'in-game' || opponent.gameStatus === 'in-game') {
                return res.status(400).json({ message: "Game is already in progress." });
            }

            //  Create new game settings
            gameSettings = new GameSettings({
                players: [userId, opponent._id],
                radius: req.body.range,
                duration: req.body.duration,
                interval: req.body.interval,
                status: 'in-progress',
                startTime: Date.now(),
                endTime: Date.now() + req.body.duration * 60000,
                userId,
            });
        } else {        // Update existing game settings
            gameSettings.status = 'in-progress';
            gameSettings.startTime = Date.now();
            gameSettings.endTime = Date.now() + gameSettings.duration * 60000;
        }

        await gameSettings.save();

        // Corrected: Update game status for both players
        user.gameStatus = 'in-game';
        opponent.gameStatus = 'in-game';
        await user.save();
        await opponent.save();

        // Send notifications
        await sendNotification(userId, opponent._id, "game-status", "The game has started!");
        await sendNotification(opponent._id, userId, "game-status", "The game has started!");

        return res.status(200).json({ success: true, message: "Game started!", gameId: gameSettings._id });

    } catch (error) {
        console.error("Error starting game:", error);
        return res.status(500).json({ message: "Internal server error." });
    }
}


// ================================================== Notifiacation  ====================================================== //


async NotificationController(req, res) {
    try {
        const userId = req.decoded.id;
        // Fetch all notifications related to this user
        const notifications = await NotificationModel.find({ receiverId: userId }).sort({ createdAt: -1 });

        return res.status(200).json({ success: true, notifications });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error while fetching notifications.' });
    }
}

// ==================================================== Location  ====================================================== //

async updateLocationController(req, res) {
    try {
        const { lat, lng } = req.body;
        const userId = req.decoded.id;

        if (!lat || !lng) {
            return res.status(400).json({ success: false, message: "Invalid location data." });
        }

        await UserModel.findByIdAndUpdate(userId, {
            location: { type: "Point", coordinates: [lng, lat] },
            lastUpdated: new Date()
        });

        res.json({ success: true, message: "Location updated successfully." });
    } catch (error) {
        res.status(500).json({ success: false, message: "Error updating location.", error });
    }
}

async getUserLocationController(req, res) {
    try {
        const userId = req.decoded.id;
        const game = await GameSettings.findOne({
            players: new mongoose.Types.ObjectId(userId),
            status: "in-progress"
        }).populate("players", "location lastUpdated");

        if (!game) {
            return res.status(404).json({ success: false, message: "No active game found." });
        }

        const opponent = game.players.find(player => player._id.toString() !== userId);
        if (!opponent || !opponent.location) {
            return res.status(404).json({ success: false, message: "Opponent location not available." });
        }

        return res.json({ success: true, location: opponent.location, lastUpdated: opponent.lastUpdated });
    } catch (error) {
        return res.status(500).json({ success: false, message: "Error fetching opponent's location.", error });
    }
}

async updateWinLossController(req, res) {
    try {
        const { result } = req.body;
        const userId = req.decoded.id;

        if (!['win', 'loss'].includes(result)) {
            return res.status(400).json({ success: false, message: "Invalid result. Must be 'win' or 'loss'." });
        }

        const user = await UserModel.findById(userId);
        if (!user) {
            return res.status(404).json({ success: false, message: "User not found." });
        }

        let game = await GameSettings.findOne({
            players: userId,
            status: "in-progress"
        });

        if (!game) {
            return res.status(404).json({ success: false, message: "No active game found." });
        }

        if (result === 'win') {
            user.gamesWon = (user.gamesWon || 0) + 1;
        } else {
            user.gamesLost = (user.gamesLost || 0) + 1;
        }
        user.gamesPlayed = (user.gamesPlayed || 0) + 1;
        await user.save();

        game.status = "completed";  
        game.endTime = new Date();
        await game.save();

        return res.status(200).json({
            success: true,
            message: `Game result updated: ${result}.`,
            stats: {
                gamesPlayed: user.gamesPlayed,
                gamesWon: user.gamesWon,
                gamesLost: user.gamesLost,
                gameStatus: game.status
            }
        });

    } catch (error) {
        return res.status(500).json({ success: false, message: "Error updating game result." });
    }
}

async getGameHistoryController(req, res) {
    try {
        const userId = req.decoded.id;
        const gameHistory = await GameSettings.find({
            players: userId,
            status: { $in: ["completed", "ended"] }
        });

        return res.status(200).json({ success: true, gameHistory });
    } catch (error) {
        return res.status(500).json({ success: false, message: "Error fetching game history." });
    }
}
}

module.exports = new UserController();

// check why the winner is not being set when the game is completed and new games are not being played ands their gamehistroy is not being recorded and why the get user location is not working 










Duplicate Key Error (E11000)	userId is set as unique in GameSettings schema	Remove unique: true from userId in the schema
Game history shows incorrect result	Comparing ObjectId with string	Convert both to .toString() before comparison



















This error occurs because your `gamesettings` collection has a unique index on `userId`, meaning each user can only have one entry. If you're trying to insert a new entry for a user who already has one, MongoDB throws a duplicate key error.

### Possible Fixes:

#### 1. **Update Instead of Insert**
If you want to allow users to update their game settings instead of creating new ones each time, modify your query to use `updateOne()` with `upsert: true`:

```javascript
await GameSettings.updateOne(
  { userId }, // Find by userId
  { $set: { duration, interval } }, // Update values
  { upsert: true } // Create a new entry if none exists
);
```
This ensures:
- If `userId` exists, it updates the existing document.
- If `userId` does not exist, it creates a new document.

#### 2. **Check Before Inserting**
If you only want to insert when no existing document is found:

```javascript
const existingSettings = await GameSettings.findOne({ userId });
if (!existingSettings) {
  await GameSettings.insertOne({ userId, duration, interval });
} else {
  console.log("Settings already exist for this user.");
}
```

#### 3. **Remove Unique Constraint (If Not Needed)**
If you don't want `userId` to be unique (allow multiple settings per user):

```bash
db.gamesettings.dropIndex("userId_1")
```
*⚠️ Be cautious, as this will allow multiple settings per user.*

Which approach fits your use case?


































{
    "success": true,
    "settings": {
        "_id": "67c193c09adb5de6a54497ce",
        "userId": "67a59df4b64735a10cb882c9",
        "players": [
            "67a59df4b64735a10cb882c9",
            "67a46e07313be6a285cc80de"
        ],
        "duration": 18,
        "interval": 2,
        "radius": 1,
        "status": "waiting",
        "startTime": null,
        "endTime": null,
        "__v": 0
    }
}

{
    "success": true,
    "settings": {
        "_id": "67c193c09adb5de6a54497ce",
        "userId": "67a59df4b64735a10cb882c9",
        "players": [
            "67a59df4b64735a10cb882c9",
            "67a46e07313be6a285cc80de"
        ],
        "duration": 18,
        "interval": 2,
        "radius": 1,
        "status": "completed",
        "startTime": "2025-02-28T10:45:51.993Z",
        "endTime": "2025-02-28T10:46:03.621Z",
        "__v": 0
    }
}  







































































































async startGame(req, res) {
    try {
        const { userId, opponentId, duration, interval, radius } = req.body;

        // Check if either player is already in an unfinished game
        const activeGame = await GameSettings.findOne({
            players: { $in: [userId, opponentId] },
            status: { $ne: "completed" },
        });

        if (activeGame) {
            return res.status(400).json({ message: "Finish your current game before starting a new one" });
        }

        // Create a new game
        const newGame = new GameSettings({
            userId,
            players: [userId, opponentId],
            duration,
            interval,
            radius,
            status: "in-progress",
            startTime: new Date(),
        });

        await newGame.save();

        // Mark users as in-game
        await User.updateMany(
            { _id: { $in: [userId, opponentId] } },
            { $set: { isInGame: true } }
        );

        return res.status(201).json({ message: "Game started successfully", game: newGame });

    } catch (error) {
        if (error.code === 11000) {
            return res.status(400).json({ message: "A game with this user already exists!" });
        }
        console.error("Error starting game:", error);
        return res.status(500).json({ message: "Server error" });
    }
}










































create mode 100644 startgame.js
arvind@arvind-ThinkPad-T440:~/hide and seek 2$ git branch -M main
arvind@arvind-ThinkPad-T440:~/hide and seek 2$ git remote add origin https://github.com/ArvindGupta493/Hide-and-seek.git
arvind@arvind-ThinkPad-T440:~/hide and seek 2$ git push -u origin main

Enumerating objects: 6288, done.
Counting objects: 100% (6288/6288), done.
Delta compression using up to 4 threads
Compressing objects: 100% (6026/6026), done.
Writing objects: 100% (6288/6288), 14.44 MiB | 660.00 KiB/s, done.
Total 6288 (delta 1070), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1070/1070), done.
To https://github.com/ArvindGupta493/Hide-and-seek.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.

arvind@arvind-ThinkPad-T440:~/hide and seek 2$ git fetch
From https://github.com/ArvindGupta493/Hide-and-seek
 * [new branch]      development -> origin/development

arvind@arvind-ThinkPad-T440:~/hide and seek 2$ git commit -m 'testing git'
[development 063c12b] testing git
 1 file changed, 1 insertion(+)

arvind@arvind-ThinkPad-T440:~/hide and seek 2$ git push origin development 
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Delta compression using up to 4 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 561 bytes | 561.00 KiB/s, done.
Total 7 (delta 6), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (6/6), completed with 6 local objects.
To https://github.com/ArvindGupta493/Hide-and-seek.git
   5f0ffcb..063c12b  development -> development
   
arvind@arvind-ThinkPad-T440:~/hide and seek 2$ 













































































import { useState, useEffect, useRef } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import style from "./game-in-progress.module.css";
import { toast } from "react-toastify";
import { GoogleMap, Circle, LoadScript } from "@react-google-maps/api";
import axios from "axios";

const mapContainerStyle = {
  width: "100%",
  height: "400px",
  borderRadius: "15px",
};

const CountdownPage = () => {
  const navigate = useNavigate();
  const location = useLocation();

  // State variables
  const [gameDuration, setGameDuration] = useState(() => parseInt(localStorage.getItem("gameDuration")) || null);
  const [intervalDuration, setIntervalDuration] = useState(() => parseInt(localStorage.getItem("intervalDuration")) || 0);
  const [remainingClicks, setRemainingClicks] = useState(0);
  const [userLocation, setUserLocation] = useState({ lat: 0, lng: 0 });

  // Refs for timers
  const gameTimerRef = useRef(null);
  const intervalRef = useRef(null);
  const isPausedRef = useRef(false); 

  // Fetch user location from backend
  useEffect(() => {
    const fetchUserLocation = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/user/get-user-location", {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        });

        if (response.data.success && response.data.location) {
          setUserLocation({
            lat: response.data.location.lat,
            lng: response.data.location.lng,
          });
        } else {
          toast.error("Failed to fetch user location.");
        }
      } catch (error) {
        toast.error("Error fetching user location.");
        console.error("Error fetching user location:", error);
      }
    };

    fetchUserLocation();
    const interval = setInterval(fetchUserLocation, 30000); // Refresh location every 30s

    return () => clearInterval(interval);
  }, []);

  return (
    <div className={style.countdownContainer}>
      <div className={style.header}>
        <p>
          Game Duration<br />
          <span>
            {gameDuration !== null
              ? `${Math.floor(gameDuration / 60)}:${(gameDuration % 60)
                  .toString()
                  .padStart(2, "0")} left`
              : "Loading..."}
          </span>
        </p>
      </div>

      {/* Google Map with Live Location */}
      <LoadScript googleMapsApiKey="YOUR_GOOGLE_MAPS_API_KEY">
        <GoogleMap mapContainerStyle={mapContainerStyle} center={userLocation} zoom={15}>
          <Circle
            center={userLocation}
            radius={500}
            options={{ strokeColor: "#00ff00", fillColor: "#00ff0050" }}
          />
        </GoogleMap>
      </LoadScript>

      <div className={style.buttonArea}>
        <button className={style.endGameButton} onClick={() => navigate("/confirmation")}>
          END GAME
        </button>
      </div>
    </div>
  );
};

export default CountdownPage;

















































































































































import { useState, useEffect, useRef } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import style from "./game-in-progress.module.css";
import { toast } from "react-toastify";
import { GoogleMap, Circle, useLoadScript } from "@react-google-maps/api";

import axios from "axios";

const mapContainerStyle = {
  width: "100%",
  height: "400px",
  borderRadius: "15px",
};

const GOOGLE_MAPS_API_KEY = "YOUR_GOOGLE_MAPS_API_KEY"; // Replace with your actual API key

const CountdownPage = () => {
  const navigate = useNavigate();
  const location = useLocation();

  // State variables
  const [gameDuration, setGameDuration] = useState(() => parseInt(localStorage.getItem("gameDuration")) || null);
  const [intervalDuration, setIntervalDuration] = useState(() => parseInt(localStorage.getItem("intervalDuration")) || 0);
  const [remainingClicks, setRemainingClicks] = useState(0);
  const [userLocation, setUserLocation] = useState(null);

  // Refs for timers
  const gameTimerRef = useRef(null);
  const intervalRef = useRef(null);
  const isPausedRef = useRef(false);

  // Fetch game settings on mount
  useEffect(() => {
    const fetchGameSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/user/duration-and-intervals", {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        });

        if (response.data.success) {
          const { duration, interval } = response.data.settings;
          setGameDuration((prev) => prev ?? duration * 60);
          setRemainingClicks(interval);
        } else {
          toast.error("Failed to fetch game settings.");
        }
      } catch (error) {
        toast.error("Error fetching game settings.");
        console.error("Error fetching game settings:", error);
      }
    };

    fetchGameSettings();
  }, []);

  // Save timer values to localStorage
  useEffect(() => {
    if (gameDuration !== null) localStorage.setItem("gameDuration", gameDuration);
    localStorage.setItem("intervalDuration", intervalDuration);
  }, [gameDuration, intervalDuration]);

  // Update user location
  useEffect(() => {
    const updateLocation = async () => {
      if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const { latitude, longitude } = position.coords;
            setUserLocation({ lat: latitude, lng: longitude });

            try {
              await axios.post("http://localhost:5000/api/user/update-location", {
                lat: latitude,
                lng: longitude,
              }, {
                headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
              });
            } catch (error) {
              console.error("Error updating location:", error);
            }
          },
          (error) => {
            console.error("Error getting location:", error);
            toast.error("Failed to get live location.");
          },
          { enableHighAccuracy: true, maximumAge: 5000, timeout: 15000 }
        );
      }
    };

    updateLocation();
    const interval = setInterval(updateLocation, 30000);
    return () => clearInterval(interval);
  }, []);

  // Handle game countdown
  useEffect(() => {
    if (isPausedRef.current) return;

    if (gameDuration > 0) {
      gameTimerRef.current = setTimeout(() => setGameDuration((prev) => prev - 1), 1000);
    } else if (gameDuration === 0) {
      clearTimeout(gameTimerRef.current);
      toast.success("Game Over!");
      setTimeout(() => navigate("/won"), 2000);
    }

    return () => clearTimeout(gameTimerRef.current);
  }, [gameDuration, navigate]);

  // Handle interval countdown
  useEffect(() => {
    if (isPausedRef.current) return;

    if (intervalDuration > 0) {
      intervalRef.current = setTimeout(() => setIntervalDuration((prev) => prev - 1), 1000);
    }

    return () => clearTimeout(intervalRef.current);
  }, [intervalDuration]);

  // Handle pause when navigating to confirmation
  useEffect(() => {
    if (location.pathname === "/confirmation") {
      isPausedRef.current = true;
      clearTimeout(gameTimerRef.current);
      clearTimeout(intervalRef.current);
    } else {
      isPausedRef.current = false;
    }
  }, [location.pathname]);

  // Handle "END GAME" button
  const handleEndGame = () => {
    toast.info("Game Paused");
    clearTimeout(gameTimerRef.current);
    clearTimeout(intervalRef.current);
    navigate("/confirmation");
  };

  // Handle interval button click
  const handleIntervalClick = () => {
    if (remainingClicks > 0 && intervalDuration === 0) {
      setIntervalDuration(120);
      setRemainingClicks((prev) => prev - 1);
      toast.info(`You can start interval ${remainingClicks - 1} more time(s).`);
    }
  };

  // Load Google Maps
  const { isLoaded } = useLoadScript({ googleMapsApiKey: GOOGLE_MAPS_API_KEY });
  


   
  
  return (
    <div className={style.countdownContainer}>
      <div className={style.header}>
        <p>Game Duration<br />
          <span>{gameDuration !== null ? `${Math.floor(gameDuration / 60)}:${(gameDuration % 60).toString().padStart(2, "0")} left` : "Loading..."}</span>
        </p>
        <p>Interval Duration {remainingClicks > 0 ? `(${remainingClicks} left)` : "(Disabled)"}<br />
          <span>{Math.floor(intervalDuration / 60)}:{(intervalDuration % 60).toString().padStart(2, "0")} left</span>
        </p>
      </div>

      <>
      {isLoaded && userLocation ? (
        <GoogleMap mapContainerStyle={mapContainerStyle} center={userLocation} zoom={15}>
          <Circle center={userLocation} radius={500} options={{ strokeColor: "#00ff00", fillColor: "#00ff0050" }} />
        </GoogleMap>
      ) : (
        <p>Loading Map...</p>
      )}
    </>
  

      <div className={style.buttonArea}>
        <button className={style.endGameButton} onClick={handleEndGame}>END GAME</button>
        <button className={style.endGameButton} onClick={handleIntervalClick} disabled={remainingClicks === 0 || intervalDuration > 0}>
          Interval {remainingClicks > 0}
        </button>
      </div>
    </div>
  );
};

export default CountdownPage;
































































import { useState, useEffect, useRef } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import style from "./game-in-progress.module.css";
import { toast } from "react-toastify";
import { GoogleMap, Circle, useLoadScript } from "@react-google-maps/api";
import axios from "axios";

const mapContainerStyle = {
  width: "100%",
  height: "400px",
  borderRadius: "15px",
};

const GOOGLE_MAPS_API_KEY = "YOUR_GOOGLE_MAPS_API_KEY"; // Ensure this is correct

const CountdownPage = () => {
  const navigate = useNavigate();
  const location = useLocation();

  // State variables
  const [gameDuration, setGameDuration] = useState(null);
  const [intervalDuration, setIntervalDuration] = useState(0);
  const [remainingClicks, setRemainingClicks] = useState(0);
  const [userLocation, setUserLocation] = useState(null);
  
  // Load Google Maps
  const { isLoaded } = useLoadScript({ googleMapsApiKey: GOOGLE_MAPS_API_KEY });

  // Fetch game settings and user location
  useEffect(() => {
    const fetchGameData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/user/duration-and-intervals", {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        });

        if (response.data.success) {
          const { duration, interval, location } = response.data.settings;
          setGameDuration(duration * 60);
          setRemainingClicks(interval);
          
          if (location) {
            setUserLocation({ lat: location.lat, lng: location.lng });
          }
        } else {
          toast.error("Failed to fetch game settings.");
        }
      } catch (error) {
        toast.error("Error fetching game settings.");
        console.error("Error fetching game settings:", error);
      }
    };

    fetchGameData();
  }, []);

  // Update user location periodically
  useEffect(() => {
    const updateLocation = async () => {
      if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const { latitude, longitude } = position.coords;
            setUserLocation({ lat: latitude, lng: longitude });

            try {
              await axios.post("http://localhost:5000/api/user/update-location", {
                lat: latitude,
                lng: longitude,
              }, {
                headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
              });
            } catch (error) {
              console.error("Error updating location:", error);
            }
          },
          (error) => {
            console.error("Error getting location:", error);
            toast.error("Failed to get live location.");
          },
          { enableHighAccuracy: true, maximumAge: 5000, timeout: 15000 }
        );
      }
    };

    updateLocation();
    const interval = setInterval(updateLocation, 30000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className={style.countdownContainer}>
      <div className={style.header}>
        <p>Game Duration<br />
          <span>{gameDuration !== null ? `${Math.floor(gameDuration / 60)}:${(gameDuration % 60).toString().padStart(2, "0")} left` : "Loading..."}</span>
        </p>
        <p>Interval Duration {remainingClicks > 0 ? `(${remainingClicks} left)` : "(Disabled)"}<br />
          <span>{Math.floor(intervalDuration / 60)}:{(intervalDuration % 60).toString().padStart(2, "0")} left</span>
        </p>
      </div>

      {isLoaded && userLocation ? (
        <GoogleMap mapContainerStyle={mapContainerStyle} center={userLocation} zoom={15}>
          <Circle center={userLocation} radius={500} options={{ strokeColor: "#00ff00", fillColor: "#00ff0050" }} />
        </GoogleMap>
      ) : (
        <p>Loading Map...</p>
      )}
    </div>
  );
};

export default CountdownPage;






need to update setting section  as to when clicked setting it password change section and when admin button is clcked then the profile view section is opened where the details of admin is shown 
and we can go to the profile section dirrectly from the settings as the in navbar their will be "profile / change password" these two buttons will be present to change the page  means in admin it will go to settings but it will open profile section and if the settings or changepassword button is clicked it will slide to the change password page































import { useEffect, useState } from "react";
import axios from "axios";
import style from "./settings.module.css";
import { toast } from "react-toastify";

const Settings = () => {
  const [admin, setAdmin] = useState(null);
  const [oldPassword, setOldPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  // const [confirmPassword, setConfirmPassword] = useState("");
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const response = await axios.get("/api/admin/get-profile", {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        });
        setAdmin(response.data.data);
      } catch (error) {
        setError(error.response?.data?.message || "Failed to load profile.");
      }
    };
  
    fetchProfile();
  }, []);
  

  const handlePasswordUpdate = async (e) => {
    e.preventDefault();

    // Validation
    if (!oldPassword || !newPassword 
      // || !confirmPassword
    ) {
      setError("All fields are required.");
      return;
    }
    if (newPassword.length < 8) {
      setError("New password must be at least 8 characters long.");
      return;
    }
    // if (newPassword !== confirmPassword) {
    //   setError("New passwords do not match.");
    //   return;
    // }

    try {
      const response = await axios.post(
        "/api/admin/update-password",
        { old_password: oldPassword, new_password: newPassword },
        { headers: { Authorization: `Bearer ${localStorage.getItem("token")}` } }
      );

      setMessage(response.data.message);
      setError("");
      setOldPassword("");
      setNewPassword("");
      toast.success("Password updated Successfully. ");
  
    } catch (err) {
      setError(err.response?.data?.message || "Error updating password.");
      toast.error("Password not updated ");

    }
  };

  return (
    <div className={style.containers}>
      <h2 className={style.title}>Admin Settings</h2>
      <div className={style.container}>

      {error && <p className={style.error}>{error}</p>}
      {message && <p className={style.message}>{message}</p>}

      {admin && (
        <div className={style.adminInfo}>
          <p><strong>Name:</strong> {admin.name}</p>
          <p><strong>Email:</strong> {admin.email}</p>
        </div>
      )}

      <h3 className={style.title}>Change Password</h3>
      <form onSubmit={handlePasswordUpdate} className={style.form}>
        <input
          type="password"
          placeholder="Old Password"
          className={style.input}
          value={oldPassword}
          onChange={(e) => setOldPassword(e.target.value)}
        />
        <input
          type="password"
          placeholder="New Password"
          className={style.input}
          value={newPassword}
          onChange={(e) => setNewPassword(e.target.value)}
        />
        {/* <input
          type="password"
          placeholder="Confirm New Password"
          className={style.input}
          value={confirmPassword}
          onChange={(e) => setConfirmPassword(e.target.value)}
        /> */}
        <button type="submit" className={style.button}>
          Update Password
        </button>
      </form>
    </div>
    </div>
  );
};

export default Settings;

















































      

import { Navigate, useNavigate } from "react-router-dom";
import { useState } from "react";
import Users from "../users/Users";
import Notifications from "../notifications/Notifications";
import Settings from "../settings/Settings";
import Dashboard from "../Dashboard/Dashboard";
import styles from "./AdminDashboard.module.css";
import defaultAvatar from "../../assets/avatar.jpg"; // Import the image
import logo from "../../assets/logo.png"; // Import the logo

const isAdmin = () => {
  return localStorage.getItem("role") === "admin";
};

const AdminDashboard = () => {
  const navigate = useNavigate();
  const [section, setSection] = useState(1);
  const [showDropdown, setShowDropdown] = useState(false);

  const adminName = localStorage.getItem("adminName") || "Admin";
  const adminImage = localStorage.getItem("adminImage") || defaultAvatar; // Use imported avatar as default

  const handleLogout = () => {
    localStorage.clear();
    navigate("/login");
  };

  if (!isAdmin()) return <Navigate to="/login" replace />;

  const handleSectionChange = (num) => {
    setSection(num);
  };

  return (
    <div className={styles.dashboardContainer}>
      {/* Navbar */}
      <header className={styles.navbar}>
        <div className={styles.logoContainer}>
          <img src={logo} alt="Hide & Seek Logo" className={styles.logo} />
          <span className={styles.adminPanelText}>Admin Panel</span>
        </div>

        <div className={styles.profileContainer} onClick={() => setShowDropdown(!showDropdown)}>
          <img src={adminImage} alt="Admin" className={styles.profileImage} />
          
          {showDropdown && (
            <div className={styles.dropdownMenu}>
              {/* <p className={styles.adminName}>{adminName}</p> */}
              <button onClick={() => handleSectionChange(1)} className={styles.adminName}>{adminName}</button>
              <button onClick={handleLogout} className={styles.logoutButton}>Logout</button>
            </div>
          )}
        </div>
      </header>
 
      {/* Sidebar */}
      <aside className={styles.sidebar}>
        <nav>
          <ul className={styles.sidebarMenu}>
            <li><div onClick={() => handleSectionChange(1)} className={styles.sidebarLink}>Dashboard</div></li>
            <li><div onClick={() => handleSectionChange(2)} className={styles.sidebarLink}>Manage Users</div></li>
            <li><div onClick={() => handleSectionChange(3)} className={styles.sidebarLink}>Notifications</div></li>
            <li><div onClick={() => handleSectionChange(4)} className={styles.sidebarLink}>Settings</div></li>
            <li><button onClick={handleLogout} className={styles.logoutButton}>Logout</button></li>
          </ul>
        </nav>
      </aside>

      {/* Main Content */}
      <main className={styles.mainContent}>
        {section === 1 && <Dashboard />}
        {section === 2 && <Users />}
        {section === 3 && <Notifications />}
        {section === 4 && <Settings />}
      </main>
    </div>
  );
};

export default AdminDashboard;




































// original backend of the notification

async NotificationsController(req, res) {
 try {
        const userId = req.decoded.id;

        // Fetch all notifications where the user is either the sender (userId) or receiver (opponentId)
        const notifications = await NotificationModel.find({
            $or: [{ userId }, { opponentId: userId }]
        })
        .populate("userId", "username email") // Populate sender details
        .populate("opponentId", "username email") // Populate opponent details
        .sort({ createdAt: -1 });

        return res.status(200).json({ success: true, notifications });
    } catch (error) {
        console.error("Error fetching notifications:", error);
        res.status(500).json({ message: "Server error while fetching notifications.", error });
    }
}

async NotificationController(req, res) {
    try {
        const { message } = req.body;
        const userId = req.decoded.id;

        if (!message) {
            return res.status(400).json({ success: false, message: "Message is required." });
        }

        // Fetch user details to get the username
        const user = await UserModel.findById(userId);
        if (!user) {
            return res.status(404).json({ success: false, message: "User not found." });
        }

        // Create a new notification for the admin
        const notification = new NotificationModel({
            userId,  
            email: user.email, 
            username: user.username, 
            message,
          //image, // ccheck if it can be added 
            type: "user-message",
            status: "read"
        });

        await notification.save();
        return res.status(200).json({ success: true, message: "Message sent to admin successfully." });
    } catch (error) {
        console.error("Error sending message:", error);
        res.status(500).json({ success: false, message: "Server error.", error });
    }
}

































// original contact us

import { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios"; 
import style from "./ContactUs.module.css";
import logo from "../../assets/logo.png";

const ContactUs = () => {
  const navigate = useNavigate();

  // State variables for form fields
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    mobileNumber: "",
    message: "",
  });

  const [errors, setErrors] = useState({});
  const [showPopup, setShowPopup] = useState(false);

  // Handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file && file.type.startsWith("image/")) {
          setFormData({ ...formData, screenshot: file });
        } else {
          setErrors({ ...errors, screenshot: "Only image files are allowed" });
        }
      };

  // Validation function
  const validateForm = () => {
    let validationErrors = {};

    if (!formData.name.trim()) {
      validationErrors.name = "Name is required";
    }

    if (!formData.email.trim()) {
      validationErrors.email = "Email is required";
    } else if (!/^\S+@\S+\.\S+$/.test(formData.email)) {
      validationErrors.email = "Invalid email format";
    }

    if (!formData.mobileNumber.trim()) {
      validationErrors.mobileNumber = "Mobile number is required";
    } else if (!/^\d{10}$/.test(formData.mobileNumber)) {
      validationErrors.mobileNumber = "Mobile number must be 10 digits";
    }

    if (!formData.message.trim()) {
      validationErrors.message = "Message is required";
    }

    setErrors(validationErrors);
    return Object.keys(validationErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) return;

    try {
      const token = localStorage.getItem("token"); 
      const response = await axios.post(
        "http://localhost:5000/api/user/contactUsNotification",
        {
          name: formData.name,
          email: formData.email,
          mobileNumber: formData.mobileNumber,
          message: formData.message,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (response.data.success) {
        setShowPopup(true);
      }
    } catch (error) {
      console.error("Error sending message:", error);
    }
}; 

  return (
    <div className={style.contactContainer}>
      <div className={style.logoContainer}>
        <img src={logo} alt="Hide & Seek Logo" className={style.logo} />
      </div>
      <h1>Contact Us</h1>
      <form onSubmit={handleSubmit}>
        <div className={style.inputGroup}>
          <label>Name *</label>
          <input type="text" name="name" value={formData.name} onChange={handleChange} />
          {errors.name && <span className={style.error}>{errors.name}</span>}
        </div>

        <div className={style.inputGroup}>
          <label>Email *</label>
          <input type="email" name="email" value={formData.email} onChange={handleChange} />
          {errors.email && <span className={style.error}>{errors.email}</span>}
        </div>

        <div className={style.inputGroup}>
          <label>Mobile Number *</label>
          <input type="text" name="mobileNumber" value={formData.mobileNumber} onChange={handleChange} maxLength="10" />
          {errors.mobileNumber && <span className={style.error}>{errors.mobileNumber}</span>}
        </div>
        <div className={style.inputGroup}>
           <label>Add Screenshot (Optional)</label>
           <input type="file" accept="image/*" onChange={handleFileChange} />
           {errors.screenshot && <span className={style.error}>{errors.screenshot}</span>}
        </div>
        <div className={style.inputGroup}>
          <label>Message *</label>
          <textarea name="message" value={formData.message} onChange={handleChange}></textarea>
          {errors.message && <span className={style.error}>{errors.message}</span>}
        </div>

        <button type="submit" className={style.submitButton}>Submit</button>
      </form>

      {showPopup && (
        <div className={style.popupOverlay}>
          <div className={style.popupBox}>
            <p>Your request has been submitted successfully!</p>
            <button onClick={() => navigate("/home")}>OK</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ContactUs;
 














 


























































 import { useState, useEffect, useRef } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import style from "./game-in-progress.module.css";
import { toast } from "react-toastify";
import { GoogleMap, Circle, useLoadScript } from "@react-google-maps/api";

import axios from "axios";

const mapContainerStyle = {
  width: "100%",
  height: "400px",
  borderRadius: "15px",
};

const GOOGLE_MAPS_API_KEY = "YOUR_GOOGLE_MAPS_API_KEY"; // Replace with your actual API key

const CountdownPage = () => {
  const navigate = useNavigate();
  const location = useLocation();

  // State variables
  const [gameDuration, setGameDuration] = useState(() => parseInt(localStorage.getItem("gameDuration")) || null);
  const [intervalDuration, setIntervalDuration] = useState(() => parseInt(localStorage.getItem("intervalDuration")) || 0);
  const [remainingClicks, setRemainingClicks] = useState(0);
  const [userLocation, setUserLocation] = useState(null);

  // Refs for timers
  const gameTimerRef = useRef(null);
  const intervalRef = useRef(null);
  const isPausedRef = useRef(false);

  // Fetch game settings on mount
  useEffect(() => {
    const fetchGameSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/user/duration-and-intervals", {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        });

        if (response.data.success) {
          const { duration, interval } = response.data.settings;
          setGameDuration((prev) => prev ?? duration * 60);
          setRemainingClicks(interval);
        } else {
          toast.error("Failed to fetch game settings.");
        }
      } catch (error) {
        toast.error("Error fetching game settings.");
        console.error("Error fetching game settings:", error);
      }
    };

    fetchGameSettings();
  }, []);

  // Save timer values to localStorage
  useEffect(() => {
    if (gameDuration !== null) localStorage.setItem("gameDuration", gameDuration);
    localStorage.setItem("intervalDuration", intervalDuration);
  }, [gameDuration, intervalDuration]);

  // Update user location
  useEffect(() => {
    const updateLocation = async () => {
      if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const { latitude, longitude } = position.coords;
            setUserLocation({ lat: latitude, lng: longitude });

            try {
              await axios.post("http://localhost:5000/api/user/update-location", {
                lat: latitude,
                lng: longitude,
              }, {
                headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
              });
            } catch (error) {
              console.error("Error updating location:", error);
            }
          },
          (error) => {
            console.error("Error getting location:", error);
            toast.error("Failed to get live location.");
          },
          { enableHighAccuracy: true, maximumAge: 5000, timeout: 15000 }
        );
      }
    };

    updateLocation();
    const interval = setInterval(updateLocation, 30000);
    return () => clearInterval(interval);
  }, []);

  // Handle game countdown
  useEffect(() => {
    if (isPausedRef.current) return;

    if (gameDuration > 0) {
      gameTimerRef.current = setTimeout(() => setGameDuration((prev) => prev - 1), 1000);
    } else if (gameDuration === 0) {
      clearTimeout(gameTimerRef.current);
      toast.success("Game Over!");
      setTimeout(() => navigate("/won"), 2000);
    }

    return () => clearTimeout(gameTimerRef.current);
  }, [gameDuration, navigate]);

  // Handle interval countdown
  useEffect(() => {
    if (isPausedRef.current) return;

    if (intervalDuration > 0) {
      intervalRef.current = setTimeout(() => setIntervalDuration((prev) => prev - 1), 1000);
    }

    return () => clearTimeout(intervalRef.current);
  }, [intervalDuration]);

  // Handle pause when navigating to confirmation
  useEffect(() => {
    if (location.pathname === "/confirmation") {
      isPausedRef.current = true;
      clearTimeout(gameTimerRef.current);
      clearTimeout(intervalRef.current);
    } else {
      isPausedRef.current = false;
    }
  }, [location.pathname]);

  // Handle "END GAME" button
  const handleEndGame = () => {
    toast.info("Game Paused");
    clearTimeout(gameTimerRef.current);
    clearTimeout(intervalRef.current);
    navigate("/confirmation");
  };

  // Handle interval button click
  const handleIntervalClick = () => {
    if (remainingClicks > 0 && intervalDuration === 0) {
      setIntervalDuration(120);
      setRemainingClicks((prev) => prev - 1);
      toast.info(`You can start interval ${remainingClicks - 1} more time(s).`);
    }
  };

  // Load Google Maps
  const { isLoaded } = useLoadScript({ googleMapsApiKey: GOOGLE_MAPS_API_KEY });
  


   
  
  return (
    <div className={style.countdownContainer}>
      <div className={style.header}>
        <p>Game Duration<br />
          <span>{gameDuration !== null ? `${Math.floor(gameDuration / 60)}:${(gameDuration % 60).toString().padStart(2, "0")} left` : "Loading..."}</span>
        </p>
        <p>Interval Duration {remainingClicks > 0 ? `(${remainingClicks} left)` : "(Disabled)"}<br />
          <span>{Math.floor(intervalDuration / 60)}:{(intervalDuration % 60).toString().padStart(2, "0")} left</span>
        </p>
      </div>

      <>
      {isLoaded && userLocation ? (
        <GoogleMap mapContainerStyle={mapContainerStyle} center={userLocation} zoom={15}>
          <Circle center={userLocation} radius={500} options={{ strokeColor: "#00ff00", fillColor: "#00ff0050" }} />
        </GoogleMap>
      ) : (
        <p>Loading Map...</p>
      )}
    </>
  

      <div className={style.buttonArea}>
        <button className={style.endGameButton} onClick={handleEndGame}>END GAME</button>
        <button className={style.endGameButton} onClick={handleIntervalClick} disabled={remainingClicks === 0 || intervalDuration > 0}>
          Interval {remainingClicks > 0}
        </button>
      </div>
    </div>
  );
};

export default CountdownPage;
